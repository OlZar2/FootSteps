// <auto-generated />
using System;
using FS.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FS.Migrations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250910122108_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FS.Core.Entities.Announcement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<Guid>("PetTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PetTypeId");

                    b.ToTable("Announcements", (string)null);

                    b.HasDiscriminator().HasValue("Announcement");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FS.Core.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnnouncementId")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("FS.Core.Entities.PetType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PetTypes", (string)null);
                });

            modelBuilder.Entity("FS.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AvatarImageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AvatarImageId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("FS.Core.Entities.FindAnnouncement", b =>
                {
                    b.HasBaseType("FS.Core.Entities.Announcement");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("FindAnnouncement");
                });

            modelBuilder.Entity("FS.Core.Entities.MissingAnnouncement", b =>
                {
                    b.HasBaseType("FS.Core.Entities.Announcement");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("PetName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Announcements", t =>
                        {
                            t.Property("Gender")
                                .HasColumnName("MissingAnnouncement_Gender");
                        });

                    b.HasDiscriminator().HasValue("MissingAnnouncement");
                });

            modelBuilder.Entity("FS.Core.Entities.StreetPetAnnouncement", b =>
                {
                    b.HasBaseType("FS.Core.Entities.Announcement");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geometry(Point,4326)");

                    b.HasDiscriminator().HasValue("StreetPetAnnouncement");
                });

            modelBuilder.Entity("FS.Core.Entities.Announcement", b =>
                {
                    b.HasOne("FS.Core.Entities.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FS.Core.Entities.PetType", "PetType")
                        .WithMany()
                        .HasForeignKey("PetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("PetType");
                });

            modelBuilder.Entity("FS.Core.Entities.Image", b =>
                {
                    b.HasOne("FS.Core.Entities.Announcement", null)
                        .WithMany("Images")
                        .HasForeignKey("AnnouncementId");
                });

            modelBuilder.Entity("FS.Core.Entities.User", b =>
                {
                    b.HasOne("FS.Core.Entities.Image", "AvatarImage")
                        .WithOne()
                        .HasForeignKey("FS.Core.Entities.User", "AvatarImageId");

                    b.OwnsOne("FS.Core.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("FS.Core.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FirstName");

                            b1.Property<string>("Patronymic")
                                .HasColumnType("text")
                                .HasColumnName("Patronymic");

                            b1.Property<string>("SecondName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("SecondName");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("AvatarImage");

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();
                });

            modelBuilder.Entity("FS.Core.Entities.Announcement", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
