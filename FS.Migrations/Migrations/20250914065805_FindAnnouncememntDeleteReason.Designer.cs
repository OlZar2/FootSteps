// <auto-generated />
using System;
using FS.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FS.Migrations.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250914065805_FindAnnouncememntDeleteReason")]
    partial class FindAnnouncememntDeleteReason
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FS.Core.Entities.AnimalAnnouncement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Breed")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geometry(Point,4326)");

                    b.Property<int>("PetType")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("AnimalAnnouncements", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("FS.Core.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnimalAnnouncementId")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AnimalAnnouncementId");

                    b.ToTable("Images", (string)null);
                });

            modelBuilder.Entity("FS.Core.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AvatarImageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AvatarImageId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("FS.Core.Entities.PetAnnouncement", b =>
                {
                    b.HasBaseType("FS.Core.Entities.AnimalAnnouncement");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");
                });

            modelBuilder.Entity("FS.Core.Entities.StreetPetAnnouncement", b =>
                {
                    b.HasBaseType("FS.Core.Entities.AnimalAnnouncement");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("FS.Core.Entities.FindAnnouncement", b =>
                {
                    b.HasBaseType("FS.Core.Entities.PetAnnouncement");

                    b.Property<int>("DeleteReason")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("FS.Core.Entities.MissingAnnouncement", b =>
                {
                    b.HasBaseType("FS.Core.Entities.PetAnnouncement");

                    b.Property<int>("DeleteReason")
                        .HasColumnType("integer");

                    b.Property<string>("PetName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("AnimalAnnouncements", t =>
                        {
                            t.Property("DeleteReason")
                                .HasColumnName("MissingAnnouncement_DeleteReason");
                        });

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("FS.Core.Entities.AnimalAnnouncement", b =>
                {
                    b.HasOne("FS.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("FS.Core.ValueObjects.District", "District", b1 =>
                        {
                            b1.Property<Guid>("AnimalAnnouncementId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("District");

                            b1.HasKey("AnimalAnnouncementId");

                            b1.ToTable("AnimalAnnouncements");

                            b1.WithOwner()
                                .HasForeignKey("AnimalAnnouncementId");
                        });

                    b.OwnsOne("FS.Core.ValueObjects.Place", "FullPlace", b1 =>
                        {
                            b1.Property<Guid>("AnimalAnnouncementId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FullPlace");

                            b1.HasKey("AnimalAnnouncementId");

                            b1.ToTable("AnimalAnnouncements");

                            b1.WithOwner()
                                .HasForeignKey("AnimalAnnouncementId");
                        });

                    b.Navigation("District")
                        .IsRequired();

                    b.Navigation("FullPlace")
                        .IsRequired();
                });

            modelBuilder.Entity("FS.Core.Entities.Image", b =>
                {
                    b.HasOne("FS.Core.Entities.AnimalAnnouncement", null)
                        .WithMany("Images")
                        .HasForeignKey("AnimalAnnouncementId");
                });

            modelBuilder.Entity("FS.Core.Entities.User", b =>
                {
                    b.HasOne("FS.Core.Entities.Image", "AvatarImage")
                        .WithOne()
                        .HasForeignKey("FS.Core.Entities.User", "AvatarImageId");

                    b.OwnsOne("FS.Core.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("FS.Core.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FirstName");

                            b1.Property<string>("Patronymic")
                                .HasColumnType("text")
                                .HasColumnName("Patronymic");

                            b1.Property<string>("SecondName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("SecondName");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("AvatarImage");

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("FullName")
                        .IsRequired();
                });

            modelBuilder.Entity("FS.Core.Entities.AnimalAnnouncement", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
